package parsetypes

import (
	"github.com/activecm/rita/config"
	"github.com/globalsign/mgo/bson"
)

// See https://docs.zeek.org/en/stable/scripts/base/frameworks/notice/main.bro.html#type-Notice::Info
//   for more information
type (
	// Notice provides a data structure for bro's Notice data
	Notice struct {
		// TimeStamp of this connection
		TimeStamp int64 `bson:"ts" bro:"ts" brotype:"time"`
		// UID is the Unique Id for this connection (generated by Bro)
		UID string `bson:"uid" bro:"uid" brotype:"string"`
		// ID is the id coming out of mongodb
		ID bson.ObjectId `bson:"id,omitempty"`
		// Source is the source address for this connection
		Source string `bson:"id_orig_h" bro:"id.orig_h" brotype:"addr"`
		// SourcePort is the source port of this connection
		SourcePort int `bson:"id_orig_p" bro:"id.orig_p" brotype:"port"`
		// Destination is the destination of the connection
		Destination string `bson:"id_resp_h" bro:"id.resp_h" brotype:"addr"`
		// DestinationPort is the port at the destination host
		DestinationPort int `bson:"id_resp_p" bro:"id.resp_p" brotype:"port"`
		// FUID is the file unique identified if the notice is associated with a file
		FUID string `bson:"fuid" bro:"fuid" brotype:"string"`
		// FileMimeType is mime type if the notice is associated with a File
		FileMimeType string `bson:"file_mime_type" bro:"file_mime_type" brotype:"string"`
		// FileDec is the file description, see link above for more details
		FileDesc string `bson:"file_desc" bro:"file_desc" brotype:"string"`
		// Proto is the string protocol identifier for this connection
		Proto string `bson:"proto" bro:"proto" brotype:"enum"`
		// Note is the Notice::type of the notice
		Note string `bson:"note" bro:"note" brotype:"enum"`
		// Msg is the human readable message for the notice
		Msg string `bson:"msg" bro:"msg" brotype:"string"`
		// Sub is the human readable sub-message for the notice
		Sub string `bson:"sub" bro:"sub" brotype:"string"`
		// Src is the source address if the Conn ID isn't present
		Src string `bson:"src" bro:"src" brotype:"addr"`
		// Dst is the destination addess if the Conn ID isn't present
		Dst string `bson:"dst" bro:"dst" brotype:"addr"`
		// Port is the associated port if the Conn ID isn't present
		Port int `bson:"p" bro:"p" brotype:"port"`
		// CountStat is the associated count, or perhaps a status code
		CountStat int `bson:"n" bro:"n" brotype:"count"`
		// PeerName is the name of remote peer that raised this notice.
		PeerName string `bson:"peer_name" bro:"peer_name" brotype:"string"`
		// PeerDescr is the textual description for the peer that raised this notice
		PeerDescr string `bson:"peer_descr" bro:"peer_descr" brotype:"string"`
		// Actions is the ActionSet that have been applied to this notice
		Actions []string `bson:"actions" bro:"actions" brotype:"set[enum]"`
		// EmailBodySections
		EmailBodySections []string `bson:"email_body_sections" bro:"email_body_sections" brotype:"vector of string"`
		//EmailDelayTokens
		EmailDelayTokens []string `bson:"email_delay_tokens" bro:"email_delay_tokens" brotype:"set[string]"`
		// Identifier
		Identifier string `bson:"identifier" bro:"identifier" brotype:"string"`
		// SuppressFor is the length of time that this unique notice should be suppressed.
		SuppressFor float64 `bson:"suppress_for" bro:"suppress_for" brotype:"interval"`
		// Dropped indicates if the $src IP address was dropped and denied network access.
		Dropped bool `bson:"dropped" bro:"dropped" brotype:"bool"`
		// CountryCode holds the country code for the connection
		CountryCode string `bson:"remote_location.country_code" bro:"remote_location.country_code" brotype:"string"`
		// Region is the region of the country for the connection
		Region string `bson:"remote_location.region" bro:"remote_location.city" brotype:"string"`
		// City is the city for the connection
		City string `bson:"remote_location.city" bro:"remote_location.city" brotype:"string"`
		// Latitude is the geo latitude of the connection
		Latitude float64 `bson:"remote_location.latitude" bro:"remote_location.latitude" brotype:"double"`
		// Longitude is the geo longitude of the connection
		Longitude float64 `bson:"remote_location.longitude" bro:"remote_location.longitude" brotype:"double"`
	}
)

//TargetCollection returns the mongo collection this entry should be inserted
//into
func (in *Notice) TargetCollection(config *config.StructureTableCfg) string {
	return config.NoticeTable
}

//Indices gives MongoDB indices that should be used with the collection
func (in *Notice) Indices() []string {
	return []string{}
}
